// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package todolist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoListClient is the client API for TodoList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoListClient interface {
	// Unary RPCs.
	// Add task Task.
	AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	// Edit task Task.
	EditTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error)
	// Mark task TaskTitle done.
	DoneTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Empty, error)
	// Delete task TaskTitle.
	DeleteTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Empty, error)
	// Show task TaskTitle.
	ShowTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	// Show task list.
	ShowTaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskList, error)
}

type todoListClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoListClient(cc grpc.ClientConnInterface) TodoListClient {
	return &todoListClient{cc}
}

func (c *todoListClient) AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/todolist.TodoList/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) EditTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/todolist.TodoList/EditTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) DoneTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/todolist.TodoList/DoneTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) DeleteTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/todolist.TodoList/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) ShowTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/todolist.TodoList/ShowTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) ShowTaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/todolist.TodoList/ShowTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoListServer is the server API for TodoList service.
// All implementations must embed UnimplementedTodoListServer
// for forward compatibility
type TodoListServer interface {
	// Unary RPCs.
	// Add task Task.
	AddTask(context.Context, *Task) (*Empty, error)
	// Edit task Task.
	EditTask(context.Context, *Task) (*Empty, error)
	// Mark task TaskTitle done.
	DoneTask(context.Context, *TaskId) (*Empty, error)
	// Delete task TaskTitle.
	DeleteTask(context.Context, *TaskId) (*Empty, error)
	// Show task TaskTitle.
	ShowTask(context.Context, *TaskId) (*Task, error)
	// Show task list.
	ShowTaskList(context.Context, *Empty) (*TaskList, error)
	mustEmbedUnimplementedTodoListServer()
}

// UnimplementedTodoListServer must be embedded to have forward compatible implementations.
type UnimplementedTodoListServer struct {
}

func (UnimplementedTodoListServer) AddTask(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTodoListServer) EditTask(context.Context, *Task) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTask not implemented")
}
func (UnimplementedTodoListServer) DoneTask(context.Context, *TaskId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoneTask not implemented")
}
func (UnimplementedTodoListServer) DeleteTask(context.Context, *TaskId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTodoListServer) ShowTask(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTask not implemented")
}
func (UnimplementedTodoListServer) ShowTaskList(context.Context, *Empty) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTaskList not implemented")
}
func (UnimplementedTodoListServer) mustEmbedUnimplementedTodoListServer() {}

// UnsafeTodoListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoListServer will
// result in compilation errors.
type UnsafeTodoListServer interface {
	mustEmbedUnimplementedTodoListServer()
}

func RegisterTodoListServer(s grpc.ServiceRegistrar, srv TodoListServer) {
	s.RegisterService(&TodoList_ServiceDesc, srv)
}

func _TodoList_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.TodoList/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).AddTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_EditTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).EditTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.TodoList/EditTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).EditTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_DoneTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).DoneTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.TodoList/DoneTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).DoneTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.TodoList/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).DeleteTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_ShowTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).ShowTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.TodoList/ShowTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).ShowTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_ShowTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).ShowTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todolist.TodoList/ShowTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).ShowTaskList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoList_ServiceDesc is the grpc.ServiceDesc for TodoList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todolist.TodoList",
	HandlerType: (*TodoListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TodoList_AddTask_Handler,
		},
		{
			MethodName: "EditTask",
			Handler:    _TodoList_EditTask_Handler,
		},
		{
			MethodName: "DoneTask",
			Handler:    _TodoList_DoneTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TodoList_DeleteTask_Handler,
		},
		{
			MethodName: "ShowTask",
			Handler:    _TodoList_ShowTask_Handler,
		},
		{
			MethodName: "ShowTaskList",
			Handler:    _TodoList_ShowTaskList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo_list.proto",
}
